@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@using Humanizer;
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName - " + "@Model.ViewDataTypeShortName".Humanize(LetterCasing.Title);
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
    if(ShowWarning())
    {
        @:<div class="alert alert-danger" role="alert">Caution. These records are critical to the application and changes may cause certain features to break.</div>    
    } 
@:
@:<h1>@Model.ViewName</h1>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
}
<div>
    <h4> @@("@Model.ViewDataTypeShortName".Humanize(LetterCasing.Title))</h4>
    <hr />
    <dl class="row">
@{
    Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
    Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

    foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
    {
        if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property) && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
        {
            if (item.Name.ToLower().Contains("json"))
            {
             <dt class = "col-sm-2">
                @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
            </dt>
            <dd class = "col-sm-10 jsonpretty">
                <a class="jsonraw">@@Html.DisplayFor(model => model.@GetValueExpression(property))</a>
                <div class="jsonformatted"></div>
            </dd>
            }            
            else 
            //Main Branch for Properties
            {
                <dt class = "col-sm-2">
                    @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                </dt>
                <dd class = "col-sm-10">
                    @@Html.DisplayFor(model => model.@GetValueExpression(property))
                </dd>               
            }            
        }
        else 
        {            
            if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
            {
            <dt class = "col-sm-2">
                @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
            </dt>
            <dd class = "col-sm-10">
                @@Html.DisplayFor(model => model.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
            </dd>
            }
        }
    }
}    </dl>
</div>
<div>
@{
    string pkName = GetPrimaryKeyName();
    if (pkName != null)
    {
    @:<a href="javascript:history.go(-1)" title="Back to List" class="btn btn-secondary"><i class="fa fa-arrow-circle-left"></i> Back</a>
    @:<a asp-action="Edit" asp-route-id="@@Model.@pkName" class="btn btn-warning details" title="Edit"><i class="fa fa-pencil-square-o"></i> Edit</a> 
    
    }
    else
    {
    @:<a href="javascript:history.go(-1)" title="Back to List" class="btn btn-secondary"><i class="fa fa-arrow-circle-left"></i> Back</a>
    @:@@Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) 
    
    }
}</div>
@@section Scripts
{
    <script type="text/javascript">
		$(document).ready(function ()
        {
            $(".jsonpretty").each(function (index) {
                $(".jsonformatted", this).JSONView($(".jsonraw", this)[0].innerText);
                $(".jsonraw", this)[0].innerText = null;
            });

		});
    </script>
}   
@{
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    
    bool ShowWarning()
    {
        string[] _warnOnTheseModels = new[] { "TaskType", "TaskTypeMapping", "FrameworkTaskRunner", "SourceAndTargetSystems", "SourceAndTargetSystemsJsonSchema", "DataFactory" };
        return _warnOnTheseModels.Any(x=>x == Model.ViewDataTypeShortName);
    }
}
