@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using System.Collections.Generic;
@using Microsoft.EntityFrameworkCore;
@using System.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using WebApplication.Services;
using WebApplication.Framework;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    string routePrefix;
    if (String.IsNullOrEmpty(Model.AreaName))
    {
        routePrefix = Model.ControllerRootName;
    }
    else
    {
        routePrefix = Model.AreaName + "/" + Model.ControllerRootName;
    }
    var modelProperties = new List<string>();
    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold)
        {
            modelProperties.Add(property.PropertyName);
        }
    }
    var bindString = string.Join(",", modelProperties);
    var contextTypeName = Model.ContextTypeName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var entitySetVar = Model.EntitySetVariable ??
        (String.IsNullOrEmpty(entitySetName)
            ? entitySetName
            : (entitySetName.Substring(0, length: 1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = Model.ModelVariable[0];
    var relatedProperties = new Dictionary<string, dynamic>();
    foreach (var nav in Model.ModelMetadata.Navigations)
    {
        relatedProperties.Add(nav.AssociationPropertyName, nav);

    }

    bool hasIsActive = false;

        foreach (var property in Model.ModelMetadata.Properties)
    {
        if(property.PropertyName == "ActiveYn")
        {
            hasIsActive = true;
        }
    }

    var inlineIncludes = "";
    foreach (var property in relatedProperties.Values)
    {
        inlineIncludes += string.Format("{0}                .Include({1} => {1}.{2})", Environment.NewLine, lambdaVar, property.AssociationPropertyName);
    }

    if (!string.IsNullOrEmpty(Model.AreaName))
    {
    @:@string.Format("[Area(\"{0}\")]", Model.AreaName)
    }
}
    public partial class @Model.ControllerName : BaseController
    {
        protected readonly @Model.ContextTypeName _context;
        

        public @(Model.ControllerName)(@Model.ContextTypeName context, ISecurityAccessProvider securityAccessProvider, IEntityRoleProvider roleProvider) : base(securityAccessProvider, roleProvider)
        {
            Name = "@Model.ControllerRootName";
            _context = context;
        }

        // GET: @routePrefix
@{
        @:public async Task<IActionResult> Index()
        @:{
    var includeExpressions = "";
    includeExpressions = String.Join("", relatedProperties
        .Values
        .Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
    if (!String.IsNullOrEmpty(includeExpressions))
    {
            @:var @entitySetVar = _context.@entitySetName@includeExpressions;
            @:return View(await @(entitySetVar).ToListAsync());
    }
    else
    {
            @:return View(await _context.@(entitySetName).ToListAsync());
    }
}        }

        // GET: @routePrefix/Details/5
        [ChecksUserAccess]
        public async Task<IActionResult> Details(@primaryKeyNullableTypeName id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var @Model.ModelVariable = await _context.@(entitySetName)@inlineIncludes
                .FirstOrDefaultAsync(m => m.@primaryKeyName == id);
            if (@Model.ModelVariable == null)
                return NotFound();
            if (!await CanPerformCurrentActionOnRecord(@Model.ModelVariable))
                return new ForbidResult();


            return View(@Model.ModelVariable);
        }

        // GET: @routePrefix/Create
        public IActionResult Create()
        {
@{
    foreach (var property in relatedProperties.Values)
    {
            var displayPropertyName = GetDisplayColumnForRelatedEntity(Model.ModelMetadata, property.AssociationPropertyName) ?? property.DisplayPropertyName;
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@(property.EntitySetName).OrderBy(x=>x.@displayPropertyName), "@property.PrimaryKeyNames[0]", "@displayPropertyName");
    }

    @: @(Model.ModelTypeName) @(Model.ModelVariable) = new @(Model.ModelTypeName)();
    if(hasIsActive)
    {
            @:@(Model.ModelVariable).ActiveYn = true;
    }

}            return View(@Model.ModelVariable);
        }

        // POST: @routePrefix/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        [ChecksUserAccess]
        public async Task<IActionResult> Create([Bind("@bindString")] @Model.ModelTypeName @Model.ModelVariable)
        {
            if (ModelState.IsValid)
            {
@{
    if (!string.IsNullOrEmpty(primaryKeyType) && IsGuid(primaryKeyType))
    {
                @:@(Model.ModelVariable).@primaryKeyName = Guid.NewGuid();
    }
                @:_context.Add(@Model.ModelVariable);

                @:if (!await CanPerformCurrentActionOnRecord(@Model.ModelVariable))
                @:{
                @:    return new ForbidResult();
                @:}

                @:await _context.SaveChangesAsync();
}                return RedirectToAction(nameof(IndexDataTable));
            }
@{
    foreach (var property in relatedProperties.Values)
    {
        var displayPropertyName = GetDisplayColumnForRelatedEntity(Model.ModelMetadata, property.AssociationPropertyName) ?? property.DisplayPropertyName;
        @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@(property.EntitySetName).OrderBy(x=>x.@displayPropertyName), "@property.PrimaryKeyNames[0]", "@displayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
    }
}
            return View(@Model.ModelVariable);
        }

        // GET: @routePrefix/Edit/5
        [ChecksUserAccess()]
        public async Task<IActionResult> Edit(@primaryKeyNullableTypeName id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var @Model.ModelVariable = await _context.@(entitySetName).FindAsync(id);
            if (@Model.ModelVariable == null)
                return NotFound();

            if (!await CanPerformCurrentActionOnRecord(@Model.ModelVariable))
                return new ForbidResult();
@{
    foreach (var property in relatedProperties.Values)
    {
        var displayPropertyName = GetDisplayColumnForRelatedEntity(Model.ModelMetadata, property.AssociationPropertyName) ?? property.DisplayPropertyName;
        @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@(property.EntitySetName).OrderBy(x=>x.@displayPropertyName), "@property.PrimaryKeyNames[0]", "@displayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
    }
}
            return View(@Model.ModelVariable);
        }

        // POST: @routePrefix/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        [ChecksUserAccess]
        public async Task<IActionResult> Edit(@primaryKeyShortTypeName id, [Bind("@bindString")] @Model.ModelTypeName @Model.ModelVariable)
        {
            if (id != @Model.ModelVariable.@primaryKeyName)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(@Model.ModelVariable);

                    if (!await CanPerformCurrentActionOnRecord(@Model.ModelVariable))
                        return new ForbidResult();
			
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!@(Model.ModelTypeName)Exists(@Model.ModelVariable.@primaryKeyName))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(IndexDataTable));
            }
@{
    foreach (var property in relatedProperties.Values)
    {
        var displayPropertyName = GetDisplayColumnForRelatedEntity(Model.ModelMetadata, property.AssociationPropertyName) ?? property.DisplayPropertyName;
        @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@(property.EntitySetName).OrderBy(x=>x.@displayPropertyName), "@property.PrimaryKeyNames[0]", "@displayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
    }
}
            return View(@Model.ModelVariable);
        }

        // GET: @routePrefix/Delete/5
        [ChecksUserAccess]
        public async Task<IActionResult> Delete(@primaryKeyNullableTypeName id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var @Model.ModelVariable = await _context.@(entitySetName)@inlineIncludes
                .FirstOrDefaultAsync(m => m.@primaryKeyName == id);
            if (@Model.ModelVariable == null)
                return NotFound();
		
            if (!await CanPerformCurrentActionOnRecord(@Model.ModelVariable))
                return new ForbidResult();

            return View(@Model.ModelVariable);
        }

        // POST: @routePrefix/Delete/5
        [HttpPost, ActionName("Delete")]
        [ChecksUserAccess()]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(@primaryKeyShortTypeName id)
        {
            var @Model.ModelVariable = await _context.@(entitySetName).FindAsync(id);

            if (!await CanPerformCurrentActionOnRecord(@Model.ModelVariable))
                return new ForbidResult();
		
            _context.@(entitySetName).Remove(@Model.ModelVariable);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(IndexDataTable));
        }

        private bool @(Model.ModelTypeName)Exists(@primaryKeyShortTypeName id)
        {
            return _context.@(entitySetName).Any(e => e.@primaryKeyName == id);
        }
    }
}
@functions
{
    // This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
    // sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (!Microsoft.VisualStudio.Web.CodeGeneration.Templating.TypeUtilities.IsNullable(primaryKeyType) || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }

        public static string GetDisplayColumnForRelatedEntity(Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.ModelMetadata metaData, string associationColumnName)
        {
            string result = null;
            var navigation = GetNavigation(metaData, associationColumnName);

            if(navigation != null)
            {
                var otherEntityType = navigation.GetTargetType();
                result = (string)otherEntityType.FindAnnotation("DisplayColumn")?.Value;
            }
            return result;
        }  

        
        public static Microsoft.EntityFrameworkCore.Metadata.INavigation GetNavigation(Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.ModelMetadata metaData, string associationColumnName)
        {
            string result = null;
            return  metaData.EntityType.GetNavigations()
                        .Where(n => n.IsDependentToPrincipal() == true && n.ForeignKey.Properties.All(p => !p.IsShadowProperty()))
                        .Where(n => n.Name == associationColumnName)
                        .FirstOrDefault();
        }  
}